{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const fetchCampsites = () => dispatch => {\n  dispatch(campsitesLoading());\n  return fetch(baseUrl + 'campsites').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(campsites => dispatch(addCampsites(campsites))).catch(error => dispatch(campsitesFailed(error.message)));\n};\nexport const fetchPromotions = () => dispatch => {\n  dispatch(promotionsLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(promotions => dispatch(addPromotions(promotions))).catch(error => dispatch(campsitesFailed(error.message)));\n};\nexport const promotionsLoading = () => ({\n  type: ActionTypes.PROMOTIONS_LOADING\n});\nexport const promotionsFailed = errMess => ({\n  type: ActionTypes.PROMOTIONS_FAILED,\n  payload: errMess\n});\nexport const addPromotions = promotions => ({\n  type: ActionTypes.ADD_PROMOTIONS,\n  payload: promotions\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errMess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errMess\n});\nexport const postComment = (campsiteId, rating, author, text) => dispatch => {\n  const newComment = {\n    campsiteId: campsiteId,\n    rating: rating,\n    author: author,\n    text: text\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comment', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const addComment = (campsiteId, rating, author, text) => ({\n  type: ActionTypes.Add_COMMENT,\n  payload: {\n    campsiteId: campsiteId,\n    rating: rating,\n    author: author,\n    text: text\n  }\n});","map":{"version":3,"sources":["/Users/kensparks/Desktop/NucampFolder/3-React/nucampsite/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetchCampsites","dispatch","campsitesLoading","fetch","then","response","ok","error","Error","status","statusText","errMess","message","json","campsites","addCampsites","catch","campsitesFailed","fetchPromotions","promotionsLoading","promotions","addPromotions","type","PROMOTIONS_LOADING","promotionsFailed","PROMOTIONS_FAILED","payload","ADD_PROMOTIONS","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","postComment","campsiteId","rating","author","text","newComment","date","Date","toISOString","method","body","JSON","stringify","headers","addComment","console","log","alert","Add_COMMENT"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\n\nexport const fetchCampsites = () => dispatch => {\n  dispatch(campsitesLoading());\n\n  return fetch(baseUrl + 'campsites')\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        const error = new Error(`Error ${response.status}: ${response.statusText}`); error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        const errMess = new Error(error.message);\n        throw errMess;\n      }\n    )\n    .then(response => response.json())\n    .then(campsites => dispatch(addCampsites(campsites)))\n    .catch(error => dispatch(campsitesFailed(error.message)));\n};\nexport const fetchPromotions = () => dispatch => {\n  dispatch(promotionsLoading());\n\n  return fetch(baseUrl + 'promotions')\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        const error = new Error(`Error ${response.status}: ${response.statusText}`); error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        const errMess = new Error(error.message);\n        throw errMess;\n      }\n    )\n    .then(response => response.json())\n    .then(promotions => dispatch(addPromotions(promotions)))\n    .catch (error => dispatch(campsitesFailed(error.message)));\n\n}\n\nexport const promotionsLoading = () => ({\n  type: ActionTypes.PROMOTIONS_LOADING\n});\n\nexport const promotionsFailed = errMess => ({\n  type: ActionTypes.PROMOTIONS_FAILED,\n  payload: errMess\n});\n\nexport const addPromotions = promotions => ({\n  type: ActionTypes.ADD_PROMOTIONS,\n  payload: promotions\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments')\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        const error = new Error(`Error ${response.status}: ${response.statusText}`); error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        var errMess = new Error(error.message);\n        throw errMess;\n      }\n    )\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = errMess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errMess\n});\n\n\nexport const postComment = (campsiteId, rating, author, text) => dispatch => {\n\n  const newComment = {\n    campsiteId: campsiteId,\n    rating: rating,\n    author: author,\n    text: text\n  };\n  newComment.date = new Date().toISOString();\n\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        const error = new Error(`Error ${response.status}: ${response.statusText}`);\n        error.response = response;\n        throw error;\n      }\n    },\n      error => { throw error; }\n    )\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error => {\n      console.log('post comment', error.message);\n      alert('Your comment could not be posted\\nError: ' + error.message);\n    });\n};\n\nexport const addComment = (campsiteId, rating, author, text) => ({\n  type: ActionTypes.Add_COMMENT,\n  payload: {\n    campsiteId: campsiteId,\n    rating: rating,\n    author: author,\n    text: text\n  }\n})"]},"metadata":{},"sourceType":"module"}